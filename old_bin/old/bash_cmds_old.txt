ls /
cd /root
ls -l
mkdir -p /root/projects/test_project/{src,bin,docs}
ls /root/projects
cd /root/projects/test_project
ls -l
cd src
echo "print('Hello, World!')" > hello.py
cat hello.py
cd ../docs
echo "Project Documentation" > README.md
echo "This is the test_project documentation." >> README.md
cat README.md
cd /root
mkdir -p /root/projects/test_project/backup/{old,new}
cd /root/projects/test_project/backup/old
echo "Old backup file" > oldbackup.txt
cat oldbackup.txt
cd ../new
echo "New backup file" > newbackup.txt
cat newbackup.txt
cd /root
mkdir -p /root/projects/test_project/src/modules
cd /root/projects/test_project/src/modules
echo "# Module 1" > module1.py
echo "# Module 2" > module2.py
cat module1.py
cat module2.py
cd /root
cd /etc
ls -l
cd /var/log
ls -lh
cat syslog | head -n 10
cd /root
cd /usr/local
ls -lh
cd /root
mkdir -p /root/tempdir/subdir
cd /root/tempdir/subdir
echo "Temporary file content" > tempfile.txt
cat tempfile.txt
cd /root/tempdir
ls
cd /root
cd /usr/local/bin
echo "Sample script in /usr/local/bin" > sample_script.sh
cat sample_script.sh
cd /root
mkdir -p /root/downloads/files/{2022,2023}
cd /root/downloads/files/2022
echo "File for 2022" > file2022.txt
cat file2022.txt
cd ../2023
echo "File for 2023" > file2023.txt
cat file2023.txt
cd /root
mkdir -p /root/projects/test_project/config
cd /root/projects/test_project/config
echo "Configuration settings" > config.txt
cat config.txt
cd /root/projects/test_project
ls -l
cd src
echo "Another Python file" > another.py
cat another.py
cd modules
echo "# New module" > new_module.py
cat new_module.py
cd /root
mkdir -p /root/projects/test_project/scripts
cd /root/projects/test_project/scripts
echo "echo 'Running script...'" > run.sh
echo "echo 'Done!'" >> run.sh
cat run.sh
cd /root
mkdir -p /root/music/{rock,jazz,classical}
cd /root/music/rock
echo "Rock music file" > rock.txt
cat rock.txt
cd ../jazz
echo "Jazz music file" > jazz.txt
cat jazz.txt
cd ../classical
echo "Classical music file" > classical.txt
cat classical.txt
cd /root
mkdir -p /root/pictures/{vacation,work,family}
cd /root/pictures/vacation
echo "Vacation photo" > photo.txt
cat photo.txt
cd ../work
echo "Work photo" > work.txt
cat work.txt
cd ../family
echo "Family photo" > family.txt
cat family.txt
cd /root
mkdir -p /root/public_html/cgi-bin
cd /root/public_html/cgi-bin
echo "print('CGI Script')" > script.cgi
cat script.cgi
cd /root
mkdir test_dir
cd test_dir
echo "Test file content" > test_file.txt
cat test_file.txt
cd /root
mkdir -p /root/new_project/{code,assets}
cd /root/new_project/code
echo "Code file" > main.py
cat main.py
cd ../assets
echo "Asset file" > image.png
cat image.png
cd /root
ls -l
cd /root/projects/test_project
cd ..
rm -rf test_project
ls
mkdir -p test_project/{config,scripts}
cd test_project/config
echo "configurations" > config.txt
cat config.txt
cd ../scripts
echo "scripts" > script.sh
cat script.sh
cd /root
cd /usr/share
ls -l
cd /root
ls -R /etc | head -n 20
ls -R /var | head -n 20
mkdir -p /root/projects/exploration/{data,reports,logs}
cd /root/projects/exploration
echo "Exploration Data" > data/data.txt
echo "Exploration Report" > reports/report.txt
echo "Exploration Log" > logs/log.txt
cat data/data.txt
cat reports/report.txt
cat logs/log.txt
cd /root
mkdir -p /root/backups/{daily,weekly,monthly}
cd /root/backups/daily
echo "Daily backup file" > daily_backup.txt
cat daily_backup.txt
cd ../weekly
echo "Weekly backup file" > weekly_backup.txt
cat weekly_backup.txt
cd ../monthly
echo "Monthly backup file" > monthly_backup.txt
cat monthly_backup.txt
cd /root
mkdir -p /root/archives/{2022,2023}
cd /root/archives/2022
echo "Archived data for 2022" > archive_2022.txt
cat archive_2022.txt
cd ../2023
echo "Archived data for 2023" > archive_2023.txt
cat archive_2023.txt
cd /root
mkdir -p /root/projects/dev/{app1,app2}
cd /root/projects/dev/app1
echo "App1 main file" > main.py
cat main.py
cd ../app2
echo "App2 main file" > main.py
cat main.py
cd /root
mkdir -p /root/projects/dev/app1/modules
cd /root/projects/dev/app1/modules
echo "Module 1 for App1" > module1.py
echo "Module 2 for App1" > module2.py
cat module1.py
cat module2.py
cd /root
mkdir -p /root/logs/{system,application}
cd /root/logs/system
echo "System log entry" > system_log.txt
cat system_log.txt
cd ../application
echo "Application log entry" > app_log.txt
cat app_log.txt
cd /root
mkdir -p /root/data/{raw,processed}
cd /root/data/raw
echo "Raw data file" > raw_data.txt
cat raw_data.txt
cd ../processed
echo "Processed data file" > processed_data.txt
cat processed_data.txt
cd /root
mkdir -p /root/temp/{tmp1,tmp2}
cd /root/temp/tmp1
echo "Temp file 1" > temp1.txt
cat temp1.txt
cd ../tmp2
echo "Temp file 2" > temp2.txt
cat temp2.txt
cd /root
mkdir -p /root/scripts/{bash,python}
cd /root/scripts/bash
echo "Bash script" > script.sh
cat script.sh
cd ../python
echo "Python script" > script.py
cat script.py
cd /root
mkdir -p /root/tests/{unit,integration}
cd /root/tests/unit
echo "Unit test" > test_unit.txt
cat test_unit.txt
cd ../integration
rm -r /root/
mkdir /root
cd /root
mkdir -p projects/test_project/{src,bin,docs}
cd projects/test_project/src
echo "print('Hello, World!')" > hello.py
python3 hello.py > /root/output.txt 2> /root/error.txt
cat /root/output.txt
cat /root/error.txt
echo "print('Hello, stderr!')" > error_test.py
python3 error_test.py > /root/output.txt 2> /root/error.txt
cat /root/error.txt
ls /root > /root/list.txt
cat /root/list.txt
ls /nonexistent > /root/list.txt 2> /root/error.txt
cat /root/error.txt
echo "Testing stdout and stderr" > /root/test_output.txt
cat /root/test_output.txt
ls /root > /root/output.txt
ls /nonexistent 2> /root/error.txt
cat /root/output.txt
cat /root/error.txt
cd /root
mkdir -p logs
ls /root 1> /root/logs/output.log 2> /root/logs/error.log
cat /root/logs/output.log
cat /root/logs/error.log
cd /root/projects
ls | grep test > /root/test_projects.txt
cat /root/test_projects.txt
find /root/projects -type d | tee /root/dirs.txt
cat /root/dirs.txt
ls /root | grep projects > /root/projects_list.txt
cat /root/projects_list.txt
ls /root /nonexistent > /root/output.txt 2> /root/error.txt
cat /root/output.txt
cat /root/error.txt
cd /root
echo "Testing basic logic" > /root/logic_test.txt
if [ -d /root/projects ]; then echo "Directory exists" >> /root/logic_test.txt; fi
if [ -d /nonexistent ]; then echo "Nonexistent directory" >> /root/logic_test.txt; else echo "Directory does not exist" >> /root/logic_test.txt; fi
cat /root/logic_test.txt
if [ -f /root/projects/test_project/src/hello.py ]; then echo "File exists" >> /root/file_check.txt; fi
if [ -f /root/nonexistent.py ]; then echo "Nonexistent file" >> /root/file_check.txt; else echo "File does not exist" >> /root/file_check.txt; fi
cat /root/file_check.txt
for i in {1..5}; do echo "Iteration $i" >> /root/loop_test.txt; done
cat /root/loop_test.txt
for file in /root/projects/*; do echo $file >> /root/files.txt; done
cat /root/files.txt
echo "Using stdout and stderr redirection" > /root/stdout_stderr.txt
echo "stdout example" > /root/stdout.txt
echo "stderr example" 2> /root/stderr.txt
cat /root/stdout.txt
cat /root/stderr.txt
echo "stdout example" > /root/combined.txt
echo "stderr example" >> /root/combined.txt 2>&1
cat /root/combined.txt
ls /root/projects/test_project 1> /root/ls_output.txt 2> /root/ls_error.txt
cat /root/ls_output.txt
cat /root/ls_error.txt
echo "Using pipes to combine commands" > /root/pipes_test.txt
ls /root | grep projects > /root/filtered_projects.txt
cat /root/filtered_projects.txt
cd /root/projects/test_project/src
echo "def greet():" > greet.py
echo "    print('Hello from greet.py')" >> greet.py
echo "greet()" >> greet.py
cat greet.py
python3 greet.py > /root/greet_output.txt 2> /root/greet_error.txt
cat /root/greet_output.txt
cat /root/greet_error.txt
cd /root
echo "Creating and testing a simple loop" > /root/loop_test.txt
for number in 1 2 3 4 5; do echo "Number: $number" >> /root/loop_test.txt; done
cat /root/loop_test.txt
echo "Using redirection and pipes together" > /root/redirect_pipe.txt
ls /root/projects | grep test | tee /root/pipe_output.txt
cat /root/pipe_output.txt
echo "Appending to an existing file" > /root/append_test.txt
echo "First line" > /root/append_test.txt
echo "Second line" >> /root/append_test.txt
echo "Third line" >> /root/append_test.txt
cat /root/append_test.txt
echo "Creating files with error messages" > /root/error_files.txt
ls /root/nonexistent 2> /root/nonexistent_error.txt
cat /root/nonexistent_error.txt
echo "Redirecting both stdout and stderr" > /root/stdout_stderr_redirection.txt
ls /root > /root/output.txt 2> /root/error.txt
cat /root/output.txt
cat /root/error.txt
echo "Creating a script with basic logic" > /root/basic_logic.sh
echo "if [ -d /root/projects ]; then" > /root/basic_logic.sh
echo "    echo 'Projects directory exists'" >> /root/basic_logic.sh
echo "else" >> /root/basic_logic.sh
echo "    echo 'Projects directory does not exist'" >> /root/basic_logic.sh
echo "fi" >> /root/basic_logic.sh
cat /root/basic_logic.sh
bash /root/basic_logic.sh > /root/logic_output.txt
cat /root/logic_output.txt
echo "Using tee command for dual output" > /root/tee_test.txt
echo "Listing root directory" | tee /root/tee_output.txt
ls /root | tee -a /root/tee_output.txt
cat /root/tee_output.txt
echo "Handling errors with redirection" > /root/error_handling.txt
ls /root /nonexistent 1> /root/multiple_output.txt 2> /root/multiple_error.txt
cat /root/multiple_output.txt
cat /root/multiple_error.txt
echo "Using loops with file handling" > /root/loop_file.txt
for file in /root/*; do echo $file >> /root/loop_file.txt; done
cat /root/loop_file.txt
echo "Appending error messages to a file" > /root/error_append.txt
ls /root /nonexistent 2>> /root/error_append.txt
cat /root/error_append.txt
cd /root
echo "Advanced piping and redirection" > /root/advanced_pipe.txt
ls /root | grep projects | tee /root/advanced_output.txt
cat /root/advanced_output.txt
echo "Using conditions in shell scripts" > /root/conditional_script.sh
echo "if [ -f /root/projects/test_project/src/hello.py ]; then" > /root/conditional_script.sh
echo "    echo 'File exists'" >> /root/conditional_script.sh
echo "else" >> /root/conditional_script.sh
echo "    echo 'File does not exist'" >> /root/conditional_script.sh
echo "fi" >> /root/conditional_script.sh
cat /root/conditional_script.sh
bash /root/conditional_script.sh > /root/conditional_output.txt
cat /root/conditional_output.txt
echo "Using pipes to filter and sort output" > /root/filter_sort.txt
ls /root | grep projects | sort > /root/sorted_projects.txt
cat /root/sorted_projects.txt
echo "Testing error redirection in loops" > /root/loop_error.txt
for i in {1..5}; do ls /root /nonexistent 2>> /root/loop_error.txt; done
cat /root/loop_error.txt
echo "Combining stdout and stderr in a file" > /root/combined_output.txt
ls /root > /root/combined.txt 2>&1
cat /root/combined.txt
cd /root
echo "Testing conditional logic with files
rm -r /root/
mkdir /root
cd /root
echo "Creating a basic bash script to handle files" > bash_script.sh
echo "#!/bin/bash" > bash_script.sh
echo "echo 'Creating a file named file1.txt...'" >> bash_script.sh
echo "echo 'This is file1.txt' > file1.txt" >> bash_script.sh
echo "echo 'Appending text to file1.txt...'" >> bash_script.sh
echo "echo 'More content' >> file1.txt" >> bash_script.sh
echo "echo 'Displaying contents of file1.txt...'" >> bash_script.sh
echo "cat file1.txt" >> bash_script.sh
chmod +x bash_script.sh
./bash_script.sh
cat file1.txt
echo "Creating a Python script for file manipulation" > python_script.py
echo "#!/usr/bin/env python3" > python_script.py
echo "print('Creating a file named file2.txt...')" >> python_script.py
echo "with open('file2.txt', 'w') as f:" >> python_script.py
echo "    f.write('This is file2.txt')" >> python_script.py
echo "print('Appending text to file2.txt...')" >> python_script.py
echo "with open('file2.txt', 'a') as f:" >> python_script.py
echo "    f.write('\\nMore content')" >> python_script.py
echo "print('Displaying contents of file2.txt...')" >> python_script.py
echo "with open('file2.txt', 'r') as f:" >> python_script.py
echo "    print(f.read())" >> python_script.py
chmod +x python_script.py
./python_script.py
cat file2.txt
echo "Creating a Bash script with a loop to create multiple files" > create_files.sh
echo "#!/bin/bash" > create_files.sh
echo "for i in {1..5}; do" >> create_files.sh
echo "    echo \"This is file \$i\" > file\$i.txt" >> create_files.sh
echo "done" >> create_files.sh
chmod +x create_files.sh
./create_files.sh
ls | grep file
cat file1.txt file2.txt
echo "Creating a Python script with a loop to create multiple files" > create_files.py
echo "#!/usr/bin/env python3" > create_files.py
echo "for i in range(1, 6):" >> create_files.py
echo "    with open(f'file{i}.txt', 'w') as f:" >> create_files.py
echo "        f.write(f'This is file {i}')" >> create_files.py
chmod +x create_files.py
./create_files.py
ls | grep file
cat file3.txt file4.txt file5.txt
echo "Creating a Bash script to read and process file content" > process_files.sh
echo "#!/bin/bash" > process_files.sh
echo "for file in file*.txt; do" >> process_files.sh
echo "    echo \"Processing \$file...\"" >> process_files.sh
echo "    cat \$file" >> process_files.sh
echo "    echo \"File length: \$(wc -c < \$file) characters\"" >> process_files.sh
echo "done" >> process_files.sh
chmod +x process_files.sh
./process_files.sh
echo "Creating a Python script to read and process file content" > process_files.py
echo "#!/usr/bin/env python3" > process_files.py
echo "import glob" >> process_files.py
echo "for file in glob.glob('file*.txt'):" >> process_files.py
echo "    print(f'Processing {file}...')" >> process_files.py
echo "    with open(file, 'r') as f:" >> process_files.py
echo "        content = f.read()" >> process_files.py
echo "        print(content)" >> process_files.py
echo "        print(f'File length: {len(content)} characters')" >> process_files.py
chmod +x process_files.py
./process_files.py
echo "Creating a Bash script to count lines in files" > count_lines.sh
echo "#!/bin/bash" > count_lines.sh
echo "for file in file*.txt; do" >> count_lines.sh
echo "    echo \"\$file has \$(wc -l < \$file) lines\"" >> count_lines.sh
echo "done" >> count_lines.sh
chmod +x count_lines.sh
./count_lines.sh
echo "Creating a Python script to count lines in files" > count_lines.py
echo "#!/usr/bin/env python3" > count_lines.py
echo "import glob" >> count_lines.py
echo "for file in glob.glob('file*.txt'):" >> count_lines.py
echo "    with open(file, 'r') as f:" >> count_lines.py
echo "        lines = f.readlines()" >> count_lines.py
echo "        print(f'{file} has {len(lines)} lines')" >> count_lines.py
chmod +x count_lines.py
./count_lines.py
echo "Using Bash and Python to create, read, and append to files" > combined.sh
echo "#!/bin/bash" > combined.sh
echo "echo 'Bash creates file6.txt'" > file6.txt" >> combined.sh
echo "echo 'This is a file created by Bash.' > file6.txt" >> combined.sh
echo "python3 -c 'print(\"Python appends to file6.txt\")'" >> combined.sh
echo "python3 -c 'with open(\"file6.txt\", \"a\") as f: f.write(\"\\nAppended by Python.\")'" >> combined.sh
chmod +x combined.sh
./combined.sh
cat file6.txt
echo "Creating a Bash script to search for text in files" > search_text.sh
echo "#!/bin/bash" > search_text.sh
echo "echo 'Searching for the word 'file' in all text files...'" >> search_text.sh
echo "grep 'file' *.txt" >> search_text.sh
chmod +x search_text.sh
./search_text.sh
echo "Creating a Python script to search for text in files" > search_text.py
echo "#!/usr/bin/env python3" > search_text.py
echo "import glob" >> search_text.py
echo "for file in glob.glob('*.txt'):" >> search_text.py
echo "    with open(file, 'r') as f:" >> search_text.py
echo "        content = f.read()" >> search_text.py
echo "        if 'file' in content:" >> search_text.py
echo "            print(f'The word 'file' found in {file}')" >> search_text.py
chmod +x search_text.py
./search_text.py
echo "Creating a Bash script to delete files" > delete_files.sh
echo "#!/bin/bash" > delete_files.sh
echo "echo 'Deleting all files starting with file...'" >> delete_files.sh
echo "rm file*.txt" >> delete_files.sh
chmod +x delete_files.sh
./delete_files.sh
ls | grep file
echo "Creating a Python script to delete files" > delete_files.py
echo "#!/usr/bin/env python3" > delete_files.py
echo "import os, glob" >> delete_files.py
echo "for file in glob.glob('file*.txt'):" >> delete_files.py
echo "    print(f'Deleting {file}...')" >> delete_files.py
echo "    os.remove(file)" >> delete_files.py
chmod +x delete_files.py
./delete_files.py
ls | grep file
echo "Creating a Bash script to copy files" > copy_files.sh
echo "#!/bin/bash" > copy_files.sh
echo "echo 'Creating file7.txt...'" >> copy_files.sh
echo "echo 'This is file7.txt' > file7.txt" >> copy_files.sh
echo "echo 'Copying file7.txt to file8.txt...'" >> copy_files.sh
echo "cp file7.txt file8.txt" >> copy_files.sh
chmod +x copy_files.sh
./copy_files.sh
ls | grep file
cat file8.txt
echo "Creating a Python script to copy files" > copy_files.py
rm -r /root/
mkdir /root
